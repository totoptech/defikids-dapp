/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HostInterface extends ethers.utils.Interface {
  functions: {
    "getUserType(address)": FunctionFragment;
    "fetchChild(address)": FunctionFragment;
    "fetchChildren()": FunctionFragment;
    "registerParent()": FunctionFragment;
    "addChild(address,string,bool)": FunctionFragment;
    "changeAccess(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getUserType", values: [string]): string;
  encodeFunctionData(functionFragment: "fetchChild", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fetchChildren",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerParent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addChild",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAccess",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUserType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchChild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAccess",
    data: BytesLike
  ): Result;

  events: {};
}

export class Host extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HostInterface;

  functions: {
    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    getUserType(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChild(
      _child: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        _address: string;
        username: string;
        isLocked: boolean;
        isActive: boolean;
        childId: BigNumber;
        0: string;
        1: string;
        2: boolean;
        3: boolean;
        4: BigNumber;
      };
    }>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChild(address)"(
      _child: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        _address: string;
        username: string;
        isLocked: boolean;
        isActive: boolean;
        childId: BigNumber;
        0: string;
        1: string;
        2: boolean;
        3: boolean;
        4: BigNumber;
      };
    }>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChildren(overrides?: CallOverrides): Promise<{
      0: {
        _address: string;
        username: string;
        isLocked: boolean;
        isActive: boolean;
        childId: BigNumber;
        0: string;
        1: string;
        2: boolean;
        3: boolean;
        4: BigNumber;
      }[];
    }>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChildren()"(overrides?: CallOverrides): Promise<{
      0: {
        _address: string;
        username: string;
        isLocked: boolean;
        isActive: boolean;
        childId: BigNumber;
        0: string;
        1: string;
        2: boolean;
        3: boolean;
        4: BigNumber;
      }[];
    }>;

    /**
     * - This function is used to create a new family (provider).
     */
    registerParent(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * - This function is used to create a new family (provider).
     */
    "registerParent()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    addChild(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    "addChild(address,string,bool)"(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    changeAccess(
      _child: string,
      _childId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    "changeAccess(address,uint256)"(
      _child: string,
      _childId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
   * @param _user - The address of the user.
   */
  getUserType(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
   * @param _user - The address of the user.
   */
  "getUserType(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * - This function is used to determine if the user is a member of a family.
   */
  fetchChild(
    _child: string,
    overrides?: CallOverrides
  ): Promise<{
    _address: string;
    username: string;
    isLocked: boolean;
    isActive: boolean;
    childId: BigNumber;
    0: string;
    1: string;
    2: boolean;
    3: boolean;
    4: BigNumber;
  }>;

  /**
   * - This function is used to determine if the user is a member of a family.
   */
  "fetchChild(address)"(
    _child: string,
    overrides?: CallOverrides
  ): Promise<{
    _address: string;
    username: string;
    isLocked: boolean;
    isActive: boolean;
    childId: BigNumber;
    0: string;
    1: string;
    2: boolean;
    3: boolean;
    4: BigNumber;
  }>;

  /**
   * - This function is used to determine if the user is a member of a family.
   */
  fetchChildren(
    overrides?: CallOverrides
  ): Promise<
    {
      _address: string;
      username: string;
      isLocked: boolean;
      isActive: boolean;
      childId: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: boolean;
      4: BigNumber;
    }[]
  >;

  /**
   * - This function is used to determine if the user is a member of a family.
   */
  "fetchChildren()"(
    overrides?: CallOverrides
  ): Promise<
    {
      _address: string;
      username: string;
      isLocked: boolean;
      isActive: boolean;
      childId: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: boolean;
      4: BigNumber;
    }[]
  >;

  /**
   * - This function is used to create a new family (provider).
   */
  registerParent(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * - This function is used to create a new family (provider).
   */
  "registerParent()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * - This function is used to add a child to the family.
   * @param _child - The address of the child.
   * @param _isLocked - Determines if the child account is locked.
   * @param _username - The username of the child.
   */
  addChild(
    _child: string,
    _username: string,
    _isLocked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * - This function is used to add a child to the family.
   * @param _child - The address of the child.
   * @param _isLocked - Determines if the child account is locked.
   * @param _username - The username of the child.
   */
  "addChild(address,string,bool)"(
    _child: string,
    _username: string,
    _isLocked: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * - This function is used to change the access of a child.
   * @param _child - The address of the child.
   */
  changeAccess(
    _child: string,
    _childId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * - This function is used to change the access of a child.
   * @param _child - The address of the child.
   */
  "changeAccess(address,uint256)"(
    _child: string,
    _childId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    getUserType(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChild(
      _child: string,
      overrides?: CallOverrides
    ): Promise<{
      _address: string;
      username: string;
      isLocked: boolean;
      isActive: boolean;
      childId: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: boolean;
      4: BigNumber;
    }>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChild(address)"(
      _child: string,
      overrides?: CallOverrides
    ): Promise<{
      _address: string;
      username: string;
      isLocked: boolean;
      isActive: boolean;
      childId: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: boolean;
      4: BigNumber;
    }>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChildren(
      overrides?: CallOverrides
    ): Promise<
      {
        _address: string;
        username: string;
        isLocked: boolean;
        isActive: boolean;
        childId: BigNumber;
        0: string;
        1: string;
        2: boolean;
        3: boolean;
        4: BigNumber;
      }[]
    >;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChildren()"(
      overrides?: CallOverrides
    ): Promise<
      {
        _address: string;
        username: string;
        isLocked: boolean;
        isActive: boolean;
        childId: BigNumber;
        0: string;
        1: string;
        2: boolean;
        3: boolean;
        4: BigNumber;
      }[]
    >;

    /**
     * - This function is used to create a new family (provider).
     */
    registerParent(overrides?: CallOverrides): Promise<void>;

    /**
     * - This function is used to create a new family (provider).
     */
    "registerParent()"(overrides?: CallOverrides): Promise<void>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    addChild(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    "addChild(address,string,bool)"(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    changeAccess(
      _child: string,
      _childId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    "changeAccess(address,uint256)"(
      _child: string,
      _childId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    getUserType(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChild(_child: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChild(address)"(
      _child: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChildren(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * - This function is used to create a new family (provider).
     */
    registerParent(overrides?: Overrides): Promise<BigNumber>;

    /**
     * - This function is used to create a new family (provider).
     */
    "registerParent()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    addChild(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    "addChild(address,string,bool)"(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    changeAccess(
      _child: string,
      _childId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    "changeAccess(address,uint256)"(
      _child: string,
      _childId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    getUserType(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * - This function is used to determine the type of user 1 = parent. 2 = child. 3 = neither
     * @param _user - The address of the user.
     */
    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChild(
      _child: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChild(address)"(
      _child: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    fetchChildren(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * - This function is used to determine if the user is a member of a family.
     */
    "fetchChildren()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * - This function is used to create a new family (provider).
     */
    registerParent(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * - This function is used to create a new family (provider).
     */
    "registerParent()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    addChild(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * - This function is used to add a child to the family.
     * @param _child - The address of the child.
     * @param _isLocked - Determines if the child account is locked.
     * @param _username - The username of the child.
     */
    "addChild(address,string,bool)"(
      _child: string,
      _username: string,
      _isLocked: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    changeAccess(
      _child: string,
      _childId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * - This function is used to change the access of a child.
     * @param _child - The address of the child.
     */
    "changeAccess(address,uint256)"(
      _child: string,
      _childId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
