/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HostInterface extends ethers.utils.Interface {
  functions: {
    "addMember(address,string)": FunctionFragment;
    "changeAccess(address)": FunctionFragment;
    "createParent()": FunctionFragment;
    "fetchChildren()": FunctionFragment;
    "getUserType(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAccess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createParent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchChildren",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUserType", values: [string]): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserType",
    data: BytesLike
  ): Result;

  events: {};
}

export class Host extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: HostInterface;

  functions: {
    addMember(
      _child: string,
      _username: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMember(address,string)"(
      _child: string,
      _username: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeAccess(
      _child: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeAccess(address)"(
      _child: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createParent(overrides?: Overrides): Promise<ContractTransaction>;

    "createParent()"(overrides?: Overrides): Promise<ContractTransaction>;

    fetchChildren(overrides?: CallOverrides): Promise<{
      0: {
        _address: string;
        username: string;
        access: number;
        0: string;
        1: string;
        2: number;
      }[];
    }>;

    "fetchChildren()"(overrides?: CallOverrides): Promise<{
      0: {
        _address: string;
        username: string;
        access: number;
        0: string;
        1: string;
        2: number;
      }[];
    }>;

    getUserType(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  addMember(
    _child: string,
    _username: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMember(address,string)"(
    _child: string,
    _username: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeAccess(
    _child: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeAccess(address)"(
    _child: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createParent(overrides?: Overrides): Promise<ContractTransaction>;

  "createParent()"(overrides?: Overrides): Promise<ContractTransaction>;

  fetchChildren(overrides?: CallOverrides): Promise<
    {
      _address: string;
      username: string;
      access: number;
      0: string;
      1: string;
      2: number;
    }[]
  >;

  "fetchChildren()"(overrides?: CallOverrides): Promise<
    {
      _address: string;
      username: string;
      access: number;
      0: string;
      1: string;
      2: number;
    }[]
  >;

  getUserType(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getUserType(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addMember(
      _child: string,
      _username: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMember(address,string)"(
      _child: string,
      _username: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAccess(_child: string, overrides?: CallOverrides): Promise<void>;

    "changeAccess(address)"(
      _child: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createParent(overrides?: CallOverrides): Promise<void>;

    "createParent()"(overrides?: CallOverrides): Promise<void>;

    fetchChildren(overrides?: CallOverrides): Promise<
      {
        _address: string;
        username: string;
        access: number;
        0: string;
        1: string;
        2: number;
      }[]
    >;

    "fetchChildren()"(overrides?: CallOverrides): Promise<
      {
        _address: string;
        username: string;
        access: number;
        0: string;
        1: string;
        2: number;
      }[]
    >;

    getUserType(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addMember(
      _child: string,
      _username: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addMember(address,string)"(
      _child: string,
      _username: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeAccess(_child: string, overrides?: Overrides): Promise<BigNumber>;

    "changeAccess(address)"(
      _child: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createParent(overrides?: Overrides): Promise<BigNumber>;

    "createParent()"(overrides?: Overrides): Promise<BigNumber>;

    fetchChildren(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchChildren()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserType(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      _child: string,
      _username: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMember(address,string)"(
      _child: string,
      _username: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeAccess(
      _child: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeAccess(address)"(
      _child: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createParent(overrides?: Overrides): Promise<PopulatedTransaction>;

    "createParent()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    fetchChildren(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchChildren()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserType(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserType(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
