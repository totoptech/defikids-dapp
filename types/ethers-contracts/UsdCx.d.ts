/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UsdCxInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeOperator(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256,bytes)": FunctionFragment;
    "createAgreement(bytes32,bytes32[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "defaultOperators()": FunctionFragment;
    "downgrade(uint256)": FunctionFragment;
    "getAccountActiveAgreements(address)": FunctionFragment;
    "getAgreementData(address,bytes32,uint256)": FunctionFragment;
    "getAgreementStateSlot(address,address,uint256,uint256)": FunctionFragment;
    "getCodeAddress()": FunctionFragment;
    "getHost()": FunctionFragment;
    "getUnderlyingToken()": FunctionFragment;
    "granularity()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,uint8,string,string)": FunctionFragment;
    "isAccountCritical(address,uint256)": FunctionFragment;
    "isAccountCriticalNow(address)": FunctionFragment;
    "isAccountSolvent(address,uint256)": FunctionFragment;
    "isAccountSolventNow(address)": FunctionFragment;
    "isOperatorFor(address,address)": FunctionFragment;
    "makeLiquidationPayouts(bytes32,address,address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "operationApprove(address,address,uint256)": FunctionFragment;
    "operationDowngrade(address,uint256)": FunctionFragment;
    "operationTransferFrom(address,address,address,uint256)": FunctionFragment;
    "operationUpgrade(address,uint256)": FunctionFragment;
    "operatorBurn(address,uint256,bytes,bytes)": FunctionFragment;
    "operatorSend(address,address,uint256,bytes,bytes)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "realtimeBalanceOf(address,uint256)": FunctionFragment;
    "realtimeBalanceOfNow(address)": FunctionFragment;
    "revokeOperator(address)": FunctionFragment;
    "selfBurn(address,uint256,bytes)": FunctionFragment;
    "selfMint(address,uint256,bytes)": FunctionFragment;
    "send(address,uint256,bytes)": FunctionFragment;
    "settleBalance(address,int256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "terminateAgreement(bytes32,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferAll(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateAgreementData(bytes32,bytes32[])": FunctionFragment;
    "updateAgreementStateSlot(address,uint256,bytes32[])": FunctionFragment;
    "updateCode(address)": FunctionFragment;
    "upgrade(uint256)": FunctionFragment;
    "upgradeTo(address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgreement",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "downgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountActiveAgreements",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementData",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementStateSlot",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCodeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "granularity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCritical",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountCriticalNow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolvent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountSolventNow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeLiquidationPayouts",
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operationApprove",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationDowngrade",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationTransferFrom",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operationUpgrade",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorBurn",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorSend",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "realtimeBalanceOfNow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "selfBurn",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selfMint",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terminateAgreement",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "transferAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementData",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgreementStateSlot",
    values: [string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "updateCode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "downgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountActiveAgreements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "granularity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCritical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountCriticalNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountSolventNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeLiquidationPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operationApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationDowngrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realtimeBalanceOfNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selfBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "selfMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgreementStateSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;

  events: {
    "AgreementAccountStateUpdated(address,address,bytes)": EventFragment;
    "AgreementCreated(address,bytes32,bytes32[])": EventFragment;
    "AgreementLiquidated(address,bytes32,address,address,uint256)": EventFragment;
    "AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": EventFragment;
    "AgreementStateUpdated(address,address,uint256)": EventFragment;
    "AgreementTerminated(address,bytes32)": EventFragment;
    "AgreementUpdated(address,bytes32,bytes32[])": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizedOperator(address,address)": EventFragment;
    "Bailout(address,uint256)": EventFragment;
    "Burned(address,address,uint256,bytes,bytes)": EventFragment;
    "CodeUpdated(bytes32,address)": EventFragment;
    "Minted(address,address,uint256,bytes,bytes)": EventFragment;
    "RevokedOperator(address,address)": EventFragment;
    "Sent(address,address,address,uint256,bytes,bytes)": EventFragment;
    "TokenDowngraded(address,uint256)": EventFragment;
    "TokenUpgraded(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AgreementAccountStateUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementLiquidatedBy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementStateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bailout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CodeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDowngraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class UsdCx extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UsdCxInterface;

  functions: {
    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    defaultOperators(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "defaultOperators()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    downgrade(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "downgrade(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      data: string[];
      0: string[];
    }>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      data: string[];
      0: string[];
    }>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      slotData: string[];
      0: string[];
    }>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      slotData: string[];
      0: string[];
    }>;

    getCodeAddress(overrides?: CallOverrides): Promise<{
      codeAddress: string;
      0: string;
    }>;

    "getCodeAddress()"(overrides?: CallOverrides): Promise<{
      codeAddress: string;
      0: string;
    }>;

    getHost(overrides?: CallOverrides): Promise<{
      host: string;
      0: string;
    }>;

    "getHost()"(overrides?: CallOverrides): Promise<{
      host: string;
      0: string;
    }>;

    getUnderlyingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getUnderlyingToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    granularity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "granularity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isCritical: boolean;
      0: boolean;
    }>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isCritical: boolean;
      0: boolean;
    }>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      isCritical: boolean;
      0: boolean;
    }>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      isCritical: boolean;
      0: boolean;
    }>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSolvent: boolean;
      0: boolean;
    }>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSolvent: boolean;
      0: boolean;
    }>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      isSolvent: boolean;
      0: boolean;
    }>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      isSolvent: boolean;
      0: boolean;
    }>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    makeLiquidationPayouts(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeLiquidationPayouts(bytes32,address,address,uint256,uint256)"(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    operationApprove(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operationApprove(address,address,uint256)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operationDowngrade(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operationDowngrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operationTransferFrom(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operationTransferFrom(address,address,address,uint256)"(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operationUpgrade(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operationUpgrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    selfBurn(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "selfBurn(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    selfMint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "selfMint(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferAll(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferAll(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCode(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgrade(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgrade(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeTo(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeTo(address,uint256,bytes)"(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(
    account: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    account: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorizeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256,bytes)"(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createAgreement(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAgreement(bytes32,bytes32[])"(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  defaultOperators(overrides?: CallOverrides): Promise<string[]>;

  "defaultOperators()"(overrides?: CallOverrides): Promise<string[]>;

  downgrade(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "downgrade(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAccountActiveAgreements(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAccountActiveAgreements(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAgreementData(
    agreementClass: string,
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAgreementData(address,bytes32,uint256)"(
    agreementClass: string,
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAgreementStateSlot(
    agreementClass: string,
    account: string,
    slotId: BigNumberish,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getAgreementStateSlot(address,address,uint256,uint256)"(
    agreementClass: string,
    account: string,
    slotId: BigNumberish,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCodeAddress(overrides?: CallOverrides): Promise<string>;

  "getCodeAddress()"(overrides?: CallOverrides): Promise<string>;

  getHost(overrides?: CallOverrides): Promise<string>;

  "getHost()"(overrides?: CallOverrides): Promise<string>;

  getUnderlyingToken(overrides?: CallOverrides): Promise<string>;

  "getUnderlyingToken()"(overrides?: CallOverrides): Promise<string>;

  granularity(overrides?: CallOverrides): Promise<BigNumber>;

  "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    underlyingToken: string,
    underlyingDecimals: BigNumberish,
    n: string,
    s: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint8,string,string)"(
    underlyingToken: string,
    underlyingDecimals: BigNumberish,
    n: string,
    s: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isAccountCritical(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountCritical(address,uint256)"(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountCriticalNow(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountCriticalNow(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountSolvent(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountSolvent(address,uint256)"(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountSolventNow(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAccountSolventNow(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOperatorFor(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isOperatorFor(address,address)"(
    operator: string,
    tokenHolder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  makeLiquidationPayouts(
    id: BytesLike,
    liquidator: string,
    penaltyAccount: string,
    rewardAmount: BigNumberish,
    bailoutAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeLiquidationPayouts(bytes32,address,address,uint256,uint256)"(
    id: BytesLike,
    liquidator: string,
    penaltyAccount: string,
    rewardAmount: BigNumberish,
    bailoutAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  operationApprove(
    account: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operationApprove(address,address,uint256)"(
    account: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operationDowngrade(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operationDowngrade(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operationTransferFrom(
    account: string,
    spender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operationTransferFrom(address,address,address,uint256)"(
    account: string,
    spender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operationUpgrade(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operationUpgrade(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operatorBurn(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorBurn(address,uint256,bytes,bytes)"(
    account: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  operatorSend(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "operatorSend(address,address,uint256,bytes,bytes)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

  realtimeBalanceOf(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    availableBalance: BigNumber;
    deposit: BigNumber;
    owedDeposit: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "realtimeBalanceOf(address,uint256)"(
    account: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    availableBalance: BigNumber;
    deposit: BigNumber;
    owedDeposit: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  realtimeBalanceOfNow(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    availableBalance: BigNumber;
    deposit: BigNumber;
    owedDeposit: BigNumber;
    timestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "realtimeBalanceOfNow(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    availableBalance: BigNumber;
    deposit: BigNumber;
    owedDeposit: BigNumber;
    timestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  revokeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeOperator(address)"(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  selfBurn(
    account: string,
    amount: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "selfBurn(address,uint256,bytes)"(
    account: string,
    amount: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  selfMint(
    account: string,
    amount: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "selfMint(address,uint256,bytes)"(
    account: string,
    amount: BigNumberish,
    userData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  send(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "send(address,uint256,bytes)"(
    recipient: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleBalance(
    account: string,
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settleBalance(address,int256)"(
    account: string,
    delta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  terminateAgreement(
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "terminateAgreement(bytes32,uint256)"(
    id: BytesLike,
    dataLength: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferAll(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferAll(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    holder: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAgreementData(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAgreementData(bytes32,bytes32[])"(
    id: BytesLike,
    data: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAgreementStateSlot(
    account: string,
    slotId: BigNumberish,
    slotData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateAgreementStateSlot(address,uint256,bytes32[])"(
    account: string,
    slotId: BigNumberish,
    slotData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCode(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCode(address)"(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgrade(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgrade(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeTo(
    to: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeTo(address,uint256,bytes)"(
    to: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    defaultOperators(overrides?: CallOverrides): Promise<string[]>;

    "defaultOperators()"(overrides?: CallOverrides): Promise<string[]>;

    downgrade(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "downgrade(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCodeAddress(overrides?: CallOverrides): Promise<string>;

    "getCodeAddress()"(overrides?: CallOverrides): Promise<string>;

    getHost(overrides?: CallOverrides): Promise<string>;

    "getHost()"(overrides?: CallOverrides): Promise<string>;

    getUnderlyingToken(overrides?: CallOverrides): Promise<string>;

    "getUnderlyingToken()"(overrides?: CallOverrides): Promise<string>;

    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    makeLiquidationPayouts(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "makeLiquidationPayouts(bytes32,address,address,uint256,uint256)"(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    operationApprove(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "operationApprove(address,address,uint256)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    operationDowngrade(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "operationDowngrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    operationTransferFrom(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "operationTransferFrom(address,address,address,uint256)"(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    operationUpgrade(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "operationUpgrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<string>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      availableBalance: BigNumber;
      deposit: BigNumber;
      owedDeposit: BigNumber;
      timestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    revokeOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    selfBurn(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "selfBurn(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    selfMint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "selfMint(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAll(recipient: string, overrides?: CallOverrides): Promise<void>;

    "transferAll(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateCode(newAddress: string, overrides?: CallOverrides): Promise<void>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "upgrade(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeTo(address,uint256,bytes)"(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AgreementAccountStateUpdated(
      agreementClass: string | null,
      account: string | null,
      state: null
    ): EventFilter;

    AgreementCreated(
      agreementClass: string | null,
      id: null,
      data: null
    ): EventFilter;

    AgreementLiquidated(
      agreementClass: string | null,
      id: null,
      penaltyAccount: string | null,
      rewardAccount: string | null,
      rewardAmount: null
    ): EventFilter;

    AgreementLiquidatedBy(
      liquidatorAccount: null,
      agreementClass: string | null,
      id: null,
      penaltyAccount: string | null,
      bondAccount: string | null,
      rewardAmount: null,
      bailoutAmount: null
    ): EventFilter;

    AgreementStateUpdated(
      agreementClass: string | null,
      account: string | null,
      slotId: null
    ): EventFilter;

    AgreementTerminated(agreementClass: string | null, id: null): EventFilter;

    AgreementUpdated(
      agreementClass: string | null,
      id: null,
      data: null
    ): EventFilter;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorizedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Bailout(bailoutAccount: string | null, bailoutAmount: null): EventFilter;

    Burned(
      operator: string | null,
      from: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    CodeUpdated(uuid: null, codeAddress: null): EventFilter;

    Minted(
      operator: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    RevokedOperator(
      operator: string | null,
      tokenHolder: string | null
    ): EventFilter;

    Sent(
      operator: string | null,
      from: string | null,
      to: string | null,
      amount: null,
      data: null,
      operatorData: null
    ): EventFilter;

    TokenDowngraded(account: string | null, amount: null): EventFilter;

    TokenUpgraded(account: string | null, amount: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    defaultOperators(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultOperators()"(overrides?: CallOverrides): Promise<BigNumber>;

    downgrade(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "downgrade(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCodeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getCodeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHost(overrides?: CallOverrides): Promise<BigNumber>;

    "getHost()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getUnderlyingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    granularity(overrides?: CallOverrides): Promise<BigNumber>;

    "granularity()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeLiquidationPayouts(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeLiquidationPayouts(bytes32,address,address,uint256,uint256)"(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    operationApprove(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operationApprove(address,address,uint256)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operationDowngrade(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operationDowngrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operationTransferFrom(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operationTransferFrom(address,address,address,uint256)"(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operationUpgrade(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operationUpgrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<BigNumber>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeOperator(operator: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    selfBurn(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "selfBurn(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    selfMint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "selfMint(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferAll(recipient: string, overrides?: Overrides): Promise<BigNumber>;

    "transferAll(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateCode(newAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgrade(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "upgrade(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeTo(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeTo(address,uint256,bytes)"(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorizeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createAgreement(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAgreement(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    defaultOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "defaultOperators()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    downgrade(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "downgrade(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAccountActiveAgreements(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountActiveAgreements(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgreementData(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAgreementData(address,bytes32,uint256)"(
      agreementClass: string,
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAgreementStateSlot(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAgreementStateSlot(address,address,uint256,uint256)"(
      agreementClass: string,
      account: string,
      slotId: BigNumberish,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCodeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCodeAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHost()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnderlyingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    granularity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "granularity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint8,string,string)"(
      underlyingToken: string,
      underlyingDecimals: BigNumberish,
      n: string,
      s: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isAccountCritical(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountCritical(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountCriticalNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountCriticalNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountSolvent(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountSolvent(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountSolventNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAccountSolventNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorFor(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOperatorFor(address,address)"(
      operator: string,
      tokenHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeLiquidationPayouts(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeLiquidationPayouts(bytes32,address,address,uint256,uint256)"(
      id: BytesLike,
      liquidator: string,
      penaltyAccount: string,
      rewardAmount: BigNumberish,
      bailoutAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationApprove(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operationApprove(address,address,uint256)"(
      account: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operationDowngrade(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operationDowngrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operationTransferFrom(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operationTransferFrom(address,address,address,uint256)"(
      account: string,
      spender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operationUpgrade(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operationUpgrade(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operatorBurn(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorBurn(address,uint256,bytes,bytes)"(
      account: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "operatorSend(address,address,uint256,bytes,bytes)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proxiableUUID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realtimeBalanceOf(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realtimeBalanceOf(address,uint256)"(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    realtimeBalanceOfNow(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "realtimeBalanceOfNow(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeOperator(address)"(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    selfBurn(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "selfBurn(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    selfMint(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "selfMint(address,uint256,bytes)"(
      account: string,
      amount: BigNumberish,
      userData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    send(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "send(address,uint256,bytes)"(
      recipient: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleBalance(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settleBalance(address,int256)"(
      account: string,
      delta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminateAgreement(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "terminateAgreement(bytes32,uint256)"(
      id: BytesLike,
      dataLength: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferAll(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferAll(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      holder: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAgreementData(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAgreementData(bytes32,bytes32[])"(
      id: BytesLike,
      data: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAgreementStateSlot(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateAgreementStateSlot(address,uint256,bytes32[])"(
      account: string,
      slotId: BigNumberish,
      slotData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateCode(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCode(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgrade(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgrade(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeTo(address,uint256,bytes)"(
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
