/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UsdcInterface extends ethers.utils.Interface {
  functions: {
    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "BLACKLISTER_ROLE()": FunctionFragment;
    "CANCEL_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DEPOSITOR_ROLE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "EIP712_VERSION()": FunctionFragment;
    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "META_TRANSACTION_TYPEHASH()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "RESCUER_ROLE()": FunctionFragment;
    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "authorizationState(address,bytes32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklist(address)": FunctionFragment;
    "blacklisters()": FunctionFragment;
    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "deposit(address,bytes)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "initialize(string,string,uint8,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "rescueERC20(address,address,uint256)": FunctionFragment;
    "rescuers()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "unBlacklist(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateMetadata(string,string)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLACKLISTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCEL_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPOSITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "META_TRANSACTION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESCUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizationState",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "blacklist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklisters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuthorization",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowanceWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowanceWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rescuers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "unBlacklist", values: [string]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithAuthorization",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLACKLISTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCEL_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPOSITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "META_TRANSACTION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESCUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklisters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowanceWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowanceWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescuers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithAuthorization",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizationCanceled(address,bytes32)": EventFragment;
    "AuthorizationUsed(address,bytes32)": EventFragment;
    "Blacklisted(address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "Pause()": EventFragment;
    "RescuerChanged(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnBlacklisted(address)": EventFragment;
    "Unpause()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizationCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizationUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescuerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
}

export class Usdc extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UsdcInterface;

  functions: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    BLACKLISTER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "BLACKLISTER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    DEPOSITOR_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEPOSITOR_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "EIP712_VERSION()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    META_TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "META_TRANSACTION_TYPEHASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    RESCUER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "RESCUER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    WITHDRAW_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    blacklist(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "blacklist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    blacklisters(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "blacklisters()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      user: string,
      depositData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,bytes)"(
      user: string,
      depositData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(string,string,uint8,address)"(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "initialized()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isBlacklisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBlacklisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    pausers(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "pausers()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rescuers(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "rescuers()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unBlacklist(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unBlacklist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateMetadata(
      newName: string,
      newSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMetadata(string,string)"(
      newName: string,
      newSymbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawWithAuthorization(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  APPROVE_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  BLACKLISTER_ROLE(overrides?: CallOverrides): Promise<string>;

  "BLACKLISTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CANCEL_AUTHORIZATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEPOSITOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEPOSITOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  EIP712_VERSION(overrides?: CallOverrides): Promise<string>;

  "EIP712_VERSION()"(overrides?: CallOverrides): Promise<string>;

  INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  META_TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "META_TRANSACTION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  RESCUER_ROLE(overrides?: CallOverrides): Promise<string>;

  "RESCUER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  WITHDRAW_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveWithAuthorization(
    owner: string,
    spender: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizationState(
    authorizer: string,
    nonce: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  "authorizationState(address,bytes32)"(
    authorizer: string,
    nonce: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklist(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "blacklist(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  blacklisters(overrides?: CallOverrides): Promise<string[]>;

  "blacklisters()"(overrides?: CallOverrides): Promise<string[]>;

  cancelAuthorization(
    authorizer: string,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
    authorizer: string,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreaseAllowanceWithAuthorization(
    owner: string,
    spender: string,
    decrement: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    decrement: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    user: string,
    depositData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,bytes)"(
    user: string,
    depositData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowanceWithAuthorization(
    owner: string,
    spender: string,
    increment: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    increment: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    newName: string,
    newSymbol: string,
    newDecimals: BigNumberish,
    childChainManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(string,string,uint8,address)"(
    newName: string,
    newSymbol: string,
    newDecimals: BigNumberish,
    childChainManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  isBlacklisted(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isBlacklisted(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pausers(overrides?: CallOverrides): Promise<string[]>;

  "pausers()"(overrides?: CallOverrides): Promise<string[]>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rescueERC20(
    tokenContract: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescueERC20(address,address,uint256)"(
    tokenContract: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rescuers(overrides?: CallOverrides): Promise<string[]>;

  "rescuers()"(overrides?: CallOverrides): Promise<string[]>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferWithAuthorization(
    from: string,
    to: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    from: string,
    to: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unBlacklist(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unBlacklist(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateMetadata(
    newName: string,
    newSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMetadata(string,string)"(
    newName: string,
    newSymbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawWithAuthorization(
    owner: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    owner: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    BLACKLISTER_ROLE(overrides?: CallOverrides): Promise<string>;

    "BLACKLISTER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEPOSITOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEPOSITOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<string>;

    "EIP712_VERSION()"(overrides?: CallOverrides): Promise<string>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    META_TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "META_TRANSACTION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    RESCUER_ROLE(overrides?: CallOverrides): Promise<string>;

    "RESCUER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    WITHDRAW_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklist(account: string, overrides?: CallOverrides): Promise<void>;

    "blacklist(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklisters(overrides?: CallOverrides): Promise<string[]>;

    "blacklisters()"(overrides?: CallOverrides): Promise<string[]>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      user: string,
      depositData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,bytes)"(
      user: string,
      depositData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,uint8,address)"(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    isBlacklisted(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isBlacklisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pausers(overrides?: CallOverrides): Promise<string[]>;

    "pausers()"(overrides?: CallOverrides): Promise<string[]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rescuers(overrides?: CallOverrides): Promise<string[]>;

    "rescuers()"(overrides?: CallOverrides): Promise<string[]>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unBlacklist(account: string, overrides?: CallOverrides): Promise<void>;

    "unBlacklist(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateMetadata(
      newName: string,
      newSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMetadata(string,string)"(
      newName: string,
      newSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawWithAuthorization(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorizationCanceled(
      authorizer: string | null,
      nonce: BytesLike | null
    ): EventFilter;

    AuthorizationUsed(
      authorizer: string | null,
      nonce: BytesLike | null
    ): EventFilter;

    Blacklisted(account: string | null): EventFilter;

    MetaTransactionExecuted(
      userAddress: null,
      relayerAddress: null,
      functionSignature: null
    ): EventFilter;

    Pause(): EventFilter;

    RescuerChanged(newRescuer: string | null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UnBlacklisted(account: string | null): EventFilter;

    Unpause(): EventFilter;
  };

  estimateGas: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BLACKLISTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "BLACKLISTER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    CANCEL_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEPOSITOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "EIP712_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    META_TRANSACTION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "META_TRANSACTION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    RESCUER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "RESCUER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WITHDRAW_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklist(account: string, overrides?: Overrides): Promise<BigNumber>;

    "blacklist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    blacklisters(overrides?: CallOverrides): Promise<BigNumber>;

    "blacklisters()"(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      user: string,
      depositData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,bytes)"(
      user: string,
      depositData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(string,string,uint8,address)"(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBlacklisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBlacklisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(overrides?: CallOverrides): Promise<BigNumber>;

    "pausers()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rescuers(overrides?: CallOverrides): Promise<BigNumber>;

    "rescuers()"(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unBlacklist(account: string, overrides?: Overrides): Promise<BigNumber>;

    "unBlacklist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    updateMetadata(
      newName: string,
      newSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMetadata(string,string)"(
      newName: string,
      newSymbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawWithAuthorization(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BLACKLISTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BLACKLISTER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CANCEL_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPOSITOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEPOSITOR_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EIP712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "EIP712_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    META_TRANSACTION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "META_TRANSACTION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RESCUER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "RESCUER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAW_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklist(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "blacklist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    blacklisters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blacklisters()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      user: string,
      depositData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,bytes)"(
      user: string,
      depositData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)"(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,uint8,address)"(
      newName: string,
      newSymbol: string,
      newDecimals: BigNumberish,
      childChainManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlacklisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBlacklisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pausers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rescuers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rescuers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unBlacklist(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unBlacklist(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateMetadata(
      newName: string,
      newSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMetadata(string,string)"(
      newName: string,
      newSymbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawWithAuthorization(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
